{"version":3,"file":"static/js/20.91bdc2b7.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/init/init.js","../node_modules/@emailjs/browser/es/methods/send/send.js","hooks/useForm.ts","components/button/Button.tsx","components/main/Contact/Contact.tsx","components/rrss/RRSS.tsx"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} userID - set the EmailJS user ID\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (userID, origin = 'https://api.emailjs.com') => {\n    store._userID = userID;\n    store._origin = origin;\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, userID) => {\n    const uID = userID || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.4.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import React, { useState, useEffect } from \"react\";\nimport { ContactFormDataType, ContactFormFields } from \"@utils/types\"\nimport emailjs from \"@emailjs/browser\"\n\n/**\n * Custom hook for handling contact form\n * \n * @param validationFunction? \n * @returns {\n *   formState,\n *   error,\n *   onSubmitionResStatus,\n *   submitHandler,\n *   updateFormDataHandler,\n *   setErrorHandler,\n *   reset\n * }\n */\n\nconst useForm = (validationFunction?: (contactFormDataType: ContactFormDataType) => boolean): {\n    formState: ContactFormDataType,\n    error: string | null,\n    onSubmitionResStatus: number | undefined\n    updateFormDataHandler: (field: ContactFormFields, e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void,\n    submitHandler: (e: React.FormEvent<HTMLFormElement>) => void,\n    setErrorHandler: React.Dispatch<React.SetStateAction<string | null>>,\n    resetHanlder: () => void\n} => {\n\n    const [formState, setFormState] = useState<ContactFormDataType>({\n        name: \"\",\n        email: \"\",\n        message: \"\"\n    })\n\n    const [onSubmitionResStatus, setOnSubmitionResStatus] = useState<number>()\n\n    const [error, setError] = useState<string | null>(null)\n\n    const updateFormDataHandler = (field: ContactFormFields, e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        const update = e.target.value\n        setFormState(prev => ({\n            ...prev,\n            [field]: update\n        }))\n    }\n\n    const submitHandler = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault()\n        try {\n            if (validate()) {\n                emailjs.send(process.env.REACT_APP_MJS_S!, process.env.REACT_APP_MJS_T!, {\n                    name: formState.name,\n                    message: formState.message,\n                    email: formState.email,\n                }).then(res => {\n                    setOnSubmitionResStatus(res.status)\n                    resetHanlder()\n                })\n            } else {\n                return\n            }\n        } catch (err) {\n            setError(err instanceof Error ? err.message : \"error submitting form\")\n        } \n    }\n\n    const validate = (): boolean => {\n        return validationFunction ? validationFunction(formState) : true\n    }\n\n    const resetHanlder = (): void => {\n        setFormState({\n            name: \"\",\n            email: \"\",\n            message: \"\"\n        })\n    }\n\n    useEffect(() => {\n        try {\n            emailjs.init(process.env.REACT_APP_MJS_UID!);\n        } catch (err) {\n            setError(err instanceof Error ? err.message : \"error on init email service\")\n        }\n    }, [])\n\n    return {\n        formState,\n        error,\n        onSubmitionResStatus,\n        updateFormDataHandler,\n        submitHandler,\n        setErrorHandler: setError,\n        resetHanlder,\n    }\n}\n\nexport default useForm","import React, { useContext } from \"react\";\nimport { appContext } from \"../AppContextProvider\";\n\ninterface Props {\n  children: React.ReactNode;\n  type?: \"submit\" | \"button\" | \"reset\";\n  action?: () => void;\n}\n\nconst Button: React.FC<Props> = ({ children, type, action }) => {\n  const { state } = useContext(appContext);\n\n  if (state.darkMode) {\n    return (\n      <button\n        type={type ?? \"button\"}\n        onClick={action ?? undefined}\n        className=\"bg-transparent border-2 border-lightBg py-2 px-4 hover:transition hover:bg-darkBg text-light text-center font-semibold\"\n      >\n        {children}\n      </button>\n    );\n  } else {\n    return (\n      <button\n        type={type ?? \"button\"}\n        onClick={action ?? undefined}\n        className=\"bg-transparent border-2 border-dark py-2 px-4 hover:transition hover:bg-lightBg text-dark text-center font-semibold\"\n      >\n        {children}\n      </button>\n    );\n  }\n};\n\nexport default Button;\n","import React from \"react\";\nimport useForm from \"../../../hooks/useForm\";\nimport RRSS from \"../../rrss/RRSS\";\nimport Button from \"../../button/Button\";\n\ninterface Props {\n  darkMode: boolean;\n}\n\nconst Contact: React.FC<Props> = ({ darkMode }) => {\n  const {\n    formState,\n    onSubmitionResStatus,\n    error,\n    submitHandler,\n    updateFormDataHandler,\n  } = useForm();\n\n  return (\n    <form\n      onSubmit={submitHandler}\n      className={`${\n        darkMode ? \"dark_scroll\" : \"light_scroll\"\n      } intro_opacity pt-10 relative flex flex-col max-h-screen overflow-y-scroll gap-4 md:gap-10 justify-center pb-8 items-center min-h-screen w-full\n      ${darkMode ? \"text-darkMode\" : \"text-dark\"}\n      `}\n    >\n      <h1\n        className={`${\n          darkMode ? \"text-darkMode\" : \"text-dark\"\n        } text-3xl text-left mx-auto w-[70%]`}\n      >\n        Contact\n      </h1>\n      <div className=\"w-[70%] flex flex-col gap-4\" >\n        <label htmlFor=\"name\"> Your Name </label>\n        <input\n          className=\"p-2 text-dark\"\n          onChange={(e) => updateFormDataHandler(\"name\", e)}\n          name=\"name\"\n          type=\"text\"\n          minLength={4}\n          required={true}\n          value={formState.name}\n          placeholder=\"Your name\"\n        />\n        <label htmlFor=\"email\"> Your Email </label>\n        <input\n          className=\"p-2 text-dark\"\n          onChange={(e) => updateFormDataHandler(\"email\", e)}\n          name=\"email\"\n          type=\"email\"\n          required={true}\n          value={formState.email}\n          placeholder=\"Your email\"\n        />\n        <label htmlFor=\"message\"> Your Message </label>\n        <textarea\n          className=\"p-2 text-dark\"\n          rows={5}\n          required={true}\n          onChange={(e) => updateFormDataHandler(\"message\", e)}\n          name=\"message\"\n          placeholder=\"Your message\"\n        />\n        <Button type=\"submit\" >\n          Submit\n        </Button>\n        <Button type=\"reset\" >\n          Reset\n        </Button>\n      </div>\n      <div className=\"w-[70%] flex flex-col gap-8 items-center\">\n      <h3\n        className={`${\n          darkMode ? \"text-darkMode\" : \"text-dark\"\n        } text-xl mt-10 text-center w-[80%]`}\n      >\n        You can also find me in:\n      </h3>\n        <div className=\"flex flex-row justify-center gap-16 items-center\" >\n          <RRSS darkMode={darkMode} />\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default Contact;","import React from \"react\";\n\ninterface Props{\n    darkMode: boolean\n}\n\nconst RRSS: React.FC<Props> = ({darkMode}) => {\n    return(\n        <>\n            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/Imagine96\" >\n                <img  src={darkMode ? \"/img/github-icon-2.svg\" : \"/img/GitHub-Mark-64px.png\"} width={50} alt=\"github link\" />\n            </a>\n            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://www.linkedin.com/in/ruben-guedes-732b64219/\" >\n                <img src={darkMode ? \"/img/linkedin.svg\" : \"/img/linkedinOnwhite.png\"} width={ darkMode ? 100 : 50} alt=\"linkedin link\" />\n            </a>\n        </>\n    )\n}\n\nexport default RRSS"],"names":["store","_origin","validateParams","userID","serviceID","templateID","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","EmailJSResponseStatus","httpResponse","instance","TypeError","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","responseStatus","open","keys","forEach","setRequestHeader","send","origin","_userID","templatePrams","uID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","validationFunction","useState","name","email","message","formState","setFormState","onSubmitionResStatus","setOnSubmitionResStatus","error","setError","validate","resetHanlder","useEffect","emailjs","process","err","Error","updateFormDataHandler","field","e","update","value","prev","submitHandler","preventDefault","then","res","setErrorHandler","children","type","action","useContext","appContext","state","darkMode","onClick","undefined","className","useForm","onSubmit","htmlFor","onChange","minLength","required","placeholder","rows","RRSS","rel","href","src","width","alt"],"sourceRoot":""}